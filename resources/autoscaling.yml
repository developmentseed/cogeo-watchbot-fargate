Resources:
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - application-autoscaling:* 
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - ecs:DescribeServices
              - ecs:UpdateService
            Resource: "*"

  AutoScallingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: ${file(./resources/config.yml):ecs.maxInstances}
      MinCapacity: ${file(./resources/config.yml):ecs.minInstances}
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt ECSService.Name]]
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScaleUp:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: PolicyScaleUp
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScallingTarget
      StepScalingPolicyConfiguration:
        Cooldown: 60
        MetricAggregationType: Maximum
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 3
  
  ScaleUpTrigger:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ${self:custom.stackFullName}-ScaleUpTrigger
      AlarmDescription: "Scale up due to visible messages in queue"
      Namespace: "AWS/SQS"
      MetricName: ApproximateNumberOfMessagesVisible
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TranslatorQueue.QueueName
      EvaluationPeriods: 1
      Period: 60
      Statistic: Maximum
      Threshold: 0
      AlarmActions:
        - !Ref "ScaleUp"

  TotalMessagesLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaTotalMessagesRole.Arn
      Timeout: 60
      Runtime: nodejs10.x
      Environment:
        Variables:
            SQS_QUEUE_URL: !Ref TranslatorQueue
            SQS_QUEUE_NAME: !GetAtt TranslatorQueue.QueueName
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          exports.handler = function(event, context, callback) {
            const sqs = new AWS.SQS({ region: process.env.AWS_DEFAULT_REGION });
            const cw = new AWS.CloudWatch({ region: process.env.AWS_DEFAULT_REGION });
            return sqs.getQueueAttributes({
              QueueUrl: process.env.SQS_QUEUE_URL,
              AttributeNames: ['ApproximateNumberOfMessagesNotVisible', 'ApproximateNumberOfMessages']
            }).promise()
              .then((attrs) => {
                return cw.putMetricData({
                  Namespace: 'AWS/SQS',
                  MetricData: [{
                    MetricName: 'TotalMessages',
                    Dimensions: [{ Name: 'QueueName', Value: process.env.SQS_QUEUE_NAME }],
                    Value: Number(attrs.Attributes.ApproximateNumberOfMessagesNotVisible) +
                            Number(attrs.Attributes.ApproximateNumberOfMessages)
                  }]
                }).promise();
              })
              .then((metric) => callback(null, metric))
              .catch((err) => callback(err));
          };

  LambdaTotalMessagesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
      - PolicyName: LambdaTotalMessagesMetric
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - logs:* 
            Resource: "arn:aws:logs:*:*:*"
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:GetQueueAttributes
            Resource: !GetAtt
              - TranslatorQueue
              - Arn

  TotalMessagesSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Update TotalMessages metric every minute
      Name: ${self:custom.stackFullName}-total-messages
      ScheduleExpression: 'cron(0/1 * * * ? *)'
      Targets: 
        - 
          Arn: !GetAtt
            - TotalMessagesLambda
            - Arn
          Id: "TotalMessagesLambda"

  MetricSchedulePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      FunctionName: !GetAtt
        - TotalMessagesLambda
        - Arn
      SourceArn: !GetAtt
        - TotalMessagesSchedule
        - Arn

  ScaleDown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: PolicyScaleDown
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScallingTarget
      StepScalingPolicyConfiguration:
        Cooldown: 60
        AdjustmentType: ExactCapacity
        StepAdjustments:
          - ScalingAdjustment: ${file(./resources/config.yml):ecs.minInstances}
            MetricIntervalUpperBound: 0

  ScaleDownTrigger:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ${self:custom.stackFullName}-ScaleDownTrigger
      AlarmDescription: "Scale down due to lack of in-flight messages in queue"
      Namespace: "AWS/SQS"
      MetricName: TotalMessages
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt TranslatorQueue.QueueName
      EvaluationPeriods: 1
      Period: 60
      Statistic: Maximum
      Threshold: 1
      AlarmActions:
        - !Ref "ScaleDown"
